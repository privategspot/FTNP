from typing import Tuple
from enum import Enum
import numpy as np


class CityType(Enum):
    SMALL = 1
    MEDIUM = 2
    LARGE = 3


class LEB:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –ª–∏–Ω–∏–π
    """

    def compute_total_losses(
        self,
        eqv_isotropically_radiated_pow: Tuple[float, float],   # ùëÉ–ë–°–∏–∑–ª, ùëÉ–ê–°–∏–∑–ª
        useful_signal_strength: Tuple[float, float],    # ùëÉùëöùëñùëõ‚àí–ë–°, ùëÉùëöùëñùëõ‚àí–ê–°
        line_loss_margin: Tuple[float, float],  # ùëç–ë–°‚àí–ê–°, ùëç–ê–°‚àí–ë–°
    ) -> Tuple[float, float]:
        """
        –°—É–º–º–∞—Ä–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ —Ä–∞–¥–∏–æ—Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–¥–∏–æ–≤–æ–ª–Ω –æ—Ç 
        –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –∫ –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏

        :param eqv_isotropically_radiated_pow:
            —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–∞—è –∏–∑–æ—Ç—Ä–æ–ø–Ω–æ –∏–∑–ª—É—á–∞–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å –ë–° –∏ –ê–° —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
        :param useful_signal_strength:
            –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å –ø–æ–ª–µ–∑–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è 50% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–≤—è–∑—å—é
        :param line_loss_margin: –∑–∞–ø–∞—Å –ø–æ –ø–æ—Ç–µ—Ä—è–º –≤ –ª–∏–Ω–∏–∏
        """
        temp1 = eqv_isotropically_radiated_pow[0] - useful_signal_strength[1] - line_loss_margin[0]
        temp2 = eqv_isotropically_radiated_pow[1] - useful_signal_strength[0] - line_loss_margin[1]
        return (temp1, temp2)

    def compute_line_loss_margin(
        self,
        building_penetraition_loses,    # ùêøùëè
        subscriber_body_loses,  # ùëäùëé
        location_coverage_location, # ùê∂ùêº
    ):
        """
        –ó–∞–ø–∞—Å –ø–æ –ø–æ—Ç–µ—Ä—è–º –≤ –ª–∏–Ω–∏–∏

        :param building_penetraition_loses:
            –ø–æ—Ç–µ—Ä–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ–º –≤–æ–ª–Ω—ã –≤ –∑–¥–∞–Ω–∏–µ
        :param subscriber_body_loses: –ø–æ—Ç–µ—Ä–∏ –≤ —Ç–µ–ª–µ –∞–±–æ–Ω–µ–Ω—Ç–∞
        :param location_coverage_location:
            –ø–æ–ø—Ä–∞–≤–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Ç—Ä–µ–±—É–µ–º—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π
        """
        Z = building_penetraition_loses + subscriber_body_loses + location_coverage_location
        return Z

    def compute_receiver_sensitivity(
        self,
        bandwidth,  # ùëìùëò
        power_to_noise_power_ratio, #   C/N
        receiver_noise_figure,  # ùëÅùêπ
    ):
        """
        –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å  –ø—Ä–∏–µ–º–Ω–∏–∫–∞

        :param bandwidth: 
            —à–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å—ã —á–∞—Å—Ç–æ—Ç, –∑–∞–Ω–∏–º–∞–µ–º–∞—è –æ–¥–Ω–∏–º
            —á–∞—Å—Ç–æ—Ç–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º–≤ —Å–∏—Å—Ç–µ–º–µ GSM
        :param power_to_noise_power_ratio:
            –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏ –Ω–µ—Å—É—â–µ–π –∫ –º–æ—â–Ω–æ—Å—Ç–∏ —à—É–º–∞,
            —Ç—Ä–µ–±—É–µ–º–æ–µ –Ω–∞ –≤—Ö–æ–¥–µ –¥–µ–º–æ–¥—É–ª—è—Ç–æ—Ä–∞
        :param receiver_noise_figure: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —à—É–º–∞ –ø—Ä–∏–µ–º–Ω–∏–∫–∞
        """
        P = -174 + 10 * np.log10(bandwidth) + power_to_noise_power_ratio + receiver_noise_figure
        return P

    def compute_useful_signal_required_power(
        self,
        receiver_sensitivity,   # ùëÉ—á
        transmitter_antenna_gain,    # ùê∫–ò
        transmission_antenna_feeder_loss,   # ùúÇ—Ñ
        diplexer_loss,  #   ùúÇ–¥–∏–ø
    ):
        """
        –ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å –ø–æ–ª–µ–∑–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞ –≤ —Å–ª—É—á–∞–µ 50% –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π

        :pararm receiver_sensitivity: –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–Ω–∏–∫–∞
        :param transmitter_antenna_gain:
            –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–∏–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—é—â–µ–π –∞–Ω—Ç–µ–Ω–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ—Ç—Ä–æ–ø–Ω–æ–π –∞–Ω—Ç–µ–Ω–Ω—ã
        :param transmission_antenna_feeder_loss: –ø–æ—Ç–µ—Ä–∏ –≤ –¥—É–ø–ª–µ–∫—Å–Ω–æ–º —Ñ–∏–ª—å—Ç—Ä–µ
        :param diplexer_loss: –ø–æ—Ç–µ—Ä–∏ –≤ –¥–∏–ø–ª–µ–∫—Å–æ—Ä–µ
        """
        P_min = receiver_sensitivity - transmitter_antenna_gain +\
            transmission_antenna_feeder_loss + diplexer_loss
        return P_min

    def compute_EIRP(
        self,
        transmitter_output_power,   # P
        transmitter_antenna_gain,    # ùê∫–ò
        transmission_antenna_feeder_loss,   # ùúÇ—Ñ
        duplex_filter_loss, # ùúÇ–¥—Ñ
        diplexer_loss,  #   ùúÇ–¥–∏–ø
        radiated_power_reduction_coefficient    # ùêπ(ùúô,Œî)
    ):
        """
        –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–∞—è –∏–∑–æ—Ç—Ä–æ–ø–Ω–æ –∏–∑–ª—É—á–∞–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å –≠–ò–ò–ú

        :param transmitter_output_power: –º–æ—â–Ω–æ—Å—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–µ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞
        :param transmitter_antenna_gain: 
            –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–∏–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—é—â–µ–π –∞–Ω—Ç–µ–Ω–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ—Ç—Ä–æ–ø–Ω–æ–π –∞–Ω—Ç–µ–Ω–Ω—ã
        :param transmission_antenna_feeder_loss:
            –ø–æ—Ç–µ—Ä–∏ –≤ —Ñ–∏–¥–µ—Ä–µ –ø–µ—Ä–µ–¥–∞—é—â–µ–π –∞–Ω—Ç–µ–Ω–Ω—ã
        :param duplex_filter_loss:
            –ø–æ—Ç–µ—Ä–∏ –≤ –¥—É–ø–ª–µ–∫—Å–Ω–æ–º —Ñ–∏–ª—å—Ç—Ä–µ
        :param diplexer_loss: –ø–æ—Ç–µ—Ä–∏ –≤ –¥–∏–ø–ª–µ–∫—Å–æ—Ä–µ
        :param radiated_power_reduction_coefficient: 
            –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, —É—á–∏—Ç—ã–≤–∞—é—â–∏–π —Å–Ω–∏–∂–µ–Ω–∏–µ –∏–∑–ª—É—á–∞–µ–º–æ–π –º–æ—â–Ω–æ—Å—Ç–∏,
            –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–Ω–æ–µ –¥–∏–∞–≥—Ä–∞–º–º–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏.
            –í –≥–ª–∞–≤–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —ç—Ç–æ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞–≤–µ–Ω –Ω—É–ª—é.
        """
        P = transmitter_output_power + transmitter_antenna_gain +\
            radiated_power_reduction_coefficient +\
            transmission_antenna_feeder_loss + duplex_filter_loss +\
            diplexer_loss
        return P

    def compute_antenna_height_correction_factor(
        self,
        radio_frequency,    # f
        receiving_antenna_height, # h–ø—Ä–º
        city_type: CityType
    ):
        """
        –ü–æ–ø—Ä–∞–≤–æ—á–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –≤—ã—Å–æ—Ç—ã –∞–Ω—Ç–µ–Ω–Ω—ã –ø–æ–¥–≤–∏–∂–Ω–æ–≥–æ
        –æ–±—ä–µ–∫—Ç–∞, –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç —Ç–∏–ø–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏

        :param radio_frequency: —á–∞—Å—Ç–æ—Ç–∞ —Ä–∞–¥–∏–æ—Å–∏–≥–Ω–∞–ª–∞
        :param receiving_antenna_height: –≤—ã—Å–æ—Ç–∞ –ø—Ä–∏–µ–º–Ω–æ–π –∞–Ω—Ç–µ–Ω–Ω—ã
        :param city_type: —Ä–∞–∑–º–µ—Ä –≥–æ—Ä–æ–¥–∞
        """
        if city_type == CityType.SMALL or city_type == CityType.MEDIUM:
            A = (1.1 * np.log10(radio_frequency) - 0.7) *\
                receiving_antenna_height - ((1.56 * np.log10(radio_frequency) -\
                0.8))
        elif city_type == CityType.LARGE:
            A = 3.2 * (np.log10(11.75 * receiving_antenna_height)) ** 2- 4.97
        return A

    def COST231_Hata(
        self,
        antenna_height_correction_factor,   # ùê¥(h–ø—Ä–º)
        radio_frequency,    # f
        transmitting_antenna_height,    # h–ø—Ä–¥
        distance_between_antennas, # d
        city_type: CityType,
    ):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ç–µ—Ä—å —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ (–ë–°)
        –¥–æ –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ (–ê–°) –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏ COST231-–•–∞—Ç–∞
        
        :param antenna_height_correction_factor:
            –ü–æ–ø—Ä–∞–≤–æ—á–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –≤—ã—Å–æ—Ç—ã –∞–Ω—Ç–µ–Ω–Ω—ã –ø–æ–¥–≤–∏–∂–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞,
            –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç —Ç–∏–ø–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
        :param radio_frequency: —á–∞—Å—Ç–æ—Ç–∞ —Ä–∞–¥–∏–æ—Å–∏–≥–Ω–∞–ª–∞
        :param transmitting_antenna_height: –≤—ã—Å–æ—Ç–∞ –ø–µ—Ä–µ–¥–∞—é—â–µ–π –∞–Ω—Ç–µ–Ω–Ω—ã
        :param distance_between_antennas: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∞–Ω—Ç–µ–Ω–Ω–∞–º–∏
        :param city_type: —Ä–∞–∑–º–µ—Ä –≥–æ—Ä–æ–¥–∞
        """
        if city_type == CityType.SMALL or city_type == CityType.MEDIUM:
            C = 0
        elif city_type == CityType.LARGE:
            C = 3
        L = 46.3 + 33.91 * np.log10(radio_frequency) - 13.821 *\
            np.log10(transmitting_antenna_height) -\
            antenna_height_correction_factor +\
            (44.9 - 6.55 * np.log10(transmitting_antenna_height)) *\
            np.log10(distance_between_antennas) + C
        return L
